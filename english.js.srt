1
00:00:00,000 --> 00:00:02,418
- 過去 10 年にわたって
私たちのウェブサイトは_

2
00:00:02,418 --> 00:00:05,600
JavaScript のおかげで
よりダイナミックでパワフルになりました。

3
00:00:05,600 --> 00:00:07,541
たくさんのコードを移動しました
一般的には_

4
00:00:07,541 --> 00:00:10,120
サーバーサイドにあるものをブラウザに_

5
00:00:10,120 --> 00:00:13,051
数千にもおよぶ
JavaScript のコードをそのままに_

6
00:00:13,051 --> 00:00:15,691
様々な HTML や CSS とつなげました

7
00:00:15,691 --> 00:00:17,821
無秩序にです。

8
00:00:17,821 --> 00:00:19,781
なので、多くの開発者は_

9
00:00:19,781 --> 00:00:23,948
Angular、React や Vue などの
JavaScript フレームワークを使います。

10
00:00:24,821 --> 00:00:27,829
Vue は親しみやすく、
融通が効き、そして、融通が効く_

11
00:00:27,829 --> 00:00:29,860
JavaScript フレームワークで
あなたを助けます、

12
00:00:29,860 --> 00:00:33,381
より管理しやすく
テストしやすいコードになるように。

13
00:00:33,381 --> 00:00:36,229
Vue はプログレッシブな
Javascript フレームワークです。これは_

14
00:00:36,229 --> 00:00:38,621
もしすでに
サーバーサイドアプリケーションがある場合に

15
00:00:38,621 --> 00:00:41,627
アプリケーションの一部として
Vue を使うことができます。

16
00:00:41,627 --> 00:00:44,381
よりインタラクティブな体験のために。

17
00:00:44,381 --> 00:00:46,269
もしくは、もしビジネスロジックを
もっと実装したい場合に_

18
00:00:46,269 --> 00:00:48,240
最初からフロントエンドに追加するなら

19
00:00:48,240 --> 00:00:50,611
Vue にはコアライブラリと
エコシステムがあります_

20
00:00:50,611 --> 00:00:52,421
スケールをさせるための。

21
00:00:52,421 --> 00:00:53,829
その他のフロントエンドのフレームワーク同様に_

22
00:00:53,829 --> 00:00:55,960
Vue ではウェブページを
分割することができます_

23
00:00:55,960 --> 00:01:00,000
再利用可能なコンポーネントに。
それぞれが HTML、

24
00:01:00,000 --> 00:01:02,291
CSS と JavaScript をもちます。
表示するための

25
00:01:02,291 --> 00:01:04,269
ページの一部として。

26
00:01:04,269 --> 00:01:06,260
次に Vue で実際に

27
00:01:06,260 --> 00:01:08,301
製品の一覧ページを作成してみましょう。

28
00:01:08,301 --> 00:01:10,187
ビデオの最後までぜひ見てください。

29
00:01:10,187 --> 00:01:13,571
Vue's 作者 Evan You
からのメッセージあります。

30
00:01:13,571 --> 00:01:15,301
Vue をどうやって使うかについてではなく＿

31
00:01:15,301 --> 00:01:16,981
いくつかの重要なコンセプトについて紹介します

32
00:01:16,981 --> 00:01:19,460
Vue の何が便利なのかについて。

33
00:01:19,460 --> 00:01:21,200
多くの JavaScript のアプリケーションと同様に_

34
00:01:21,200 --> 00:01:24,272
ウェブページにデータを表示する
ところから始めましょう。

35
00:01:24,272 --> 00:01:26,591
まずは簡単なところから始めましょう。

36
00:01:26,591 --> 00:01:29,745
Vue ライブラリを追加して
Vue インスタンスを作成します_

37
00:01:29,745 --> 00:01:33,673
そして app という ID を持つ
ルート要素と結びつけます。

38
00:01:33,673 --> 00:01:36,032
el は element の略です。

39
00:01:36,032 --> 00:01:39,505
data をオブジェクト内に移動します。

40
00:01:39,505 --> 00:01:41,993
and change X into an expression
そして X を式に変更します＿

41
00:01:41,993 --> 00:01:44,544
２重の中括弧で囲んだ。

42
00:01:44,544 --> 00:01:46,945
見ての通り、動きます。

43
00:01:46,945 --> 00:01:50,695
かっこいいですよね。しかし Vue の
マジックはデータが変更してからが本番です。

44
00:01:50,695 --> 00:01:51,975
例えば console 画面を開いて

45
00:01:51,975 --> 00:01:54,735
product の値を変更してみます。

46
00:01:54,735 --> 00:01:57,324
product の値の変更
を受け取るとすぐに_

47
00:01:57,324 --> 00:01:59,953
Vue は自動的に HTML を更新しました。

48
00:01:59,953 --> 00:02:01,745
これは Vue がリアクティブだからです。

49
00:02:01,745 --> 00:02:03,273
meaning that when our data changes,
つまり、データが変更されると_

50
00:02:03,273 --> 00:02:05,193
Vue はその変更すべてを監視します。

51
00:02:05,193 --> 00:02:07,255
私たちが使っているウェブページの中で。

52
00:02:07,255 --> 00:02:10,305
文字列だけに限らず
様々な種類のデータを可能です。

53
00:02:10,305 --> 00:02:11,604
それでは、ひとつの商品ではなく＿

54
00:02:11,604 --> 00:02:14,604
商品を配列にしてみましょう。

55
00:02:14,604 --> 00:02:17,865
h2 タグを ul タグに
変更してみましょう。

56
00:02:17,865 --> 00:02:20,535
そして、配列のそれぞれの商品ごとに
新たな li アイテムを作成します。

57
00:02:20,535 --> 00:02:22,618
Vue の v-for 命令を使って。

58
00:02:24,353 --> 00:02:26,615
この方法では、それぞれの商品は
それ自身の li アイテムを作成します。

59
00:02:26,615 --> 00:02:28,495
ご覧の通り。

60
00:02:28,495 --> 00:02:30,352
ただこれだとウソっぽいですよね。

61
00:02:30,352 --> 00:02:32,312
なので、まずは空のリストを作ります。

62
00:02:32,312 --> 00:02:34,815
そして商品を実際の API を使って取得します。

63
00:02:34,815 --> 00:02:37,433
値はどこか他のデータベースで
定義されたものが返ってきます。

64
00:02:37,433 --> 00:02:38,863
アプリケーションが作られると、

65
00:02:38,863 --> 00:02:41,866
この API から
最新の商品一覧を取得します。

66
00:02:41,866 --> 00:02:43,199
ここでするべきことは

67
00:02:43,199 --> 00:02:45,063
商品リストを取得して

68
00:02:45,063 --> 00:02:46,923
それらを更新することです。

69
00:02:46,923 --> 00:02:48,281
見ての通りこのウェブページは

70
00:02:48,281 --> 00:02:51,435
それぞれの li は
オブジェクトをそのまま表示しています

71
00:02:51,435 --> 00:02:53,474
これではあまり読みやすくありませんね。

72
00:02:53,474 --> 00:02:56,265
もっと見やすく変更してみましょう。

73
00:02:56,265 --> 00:02:59,643
商品の量と名前を表示します。

74
00:02:59,643 --> 00:03:02,265
これでだいぶ読みやすくなりましたね。

75
00:03:02,265 --> 00:03:03,563
おそらく気づきたいでしょう。

76
00:03:03,563 --> 00:03:05,675
商品の在庫がゼロの場合に。

77
00:03:05,675 --> 00:03:09,595
なので span で囲まれたテキスト、
out of stock を追加してみましょう

78
00:03:09,595 --> 00:03:13,334
この表示は商品の在庫が
セロのときにのみ表示されるべきですね。

79
00:03:13,334 --> 00:03:16,134
これには v-if ディレクティブをつかいます

80
00:03:16,134 --> 00:03:20,362
こうすると jacket の在庫がゼロのときに
out of stock のテキストが表示されます

81
00:03:20,362 --> 00:03:22,081
次に、すべての商品の在庫数を
表示させるとしたらどうでしょう＿

82
00:03:22,081 --> 00:03:24,641
このリストの下に。

83
00:03:24,641 --> 00:03:26,468
これを実現するためにはただ＿

84
00:03:26,468 --> 00:03:29,570
computed のプロパティに totalProducts を追加します

85
00:03:29,570 --> 00:03:34,228
これはすべての商品の
在庫数を返します。

86
00:03:34,228 --> 00:03:36,490
もし JavaScript の reduce 関数
を知らなくても、

87
00:03:36,490 --> 00:03:40,468
それぞれの商品の在庫を
足し上げています。

88
00:03:40,468 --> 00:03:41,851
見ての通り、ブラウザ上では

89
00:03:41,851 --> 00:03:45,308
先程のプロパティが
すべての商品の在庫数を追加しています。

90
00:03:45,308 --> 00:03:47,588
ブラウザ上で実行できる
Vue のツールをお見せしましょう。

91
00:03:47,588 --> 00:03:51,380
Chrome プラグインで
先程定義したデータや＿

92
00:03:51,380 --> 00:03:53,547
ここで詳しく調べられます。

93
00:03:55,108 --> 00:03:57,460
コンソール上でも、面白いことができます

94
00:03:57,460 --> 00:03:59,850
let's pop the last item out of the array
配列の最後にアイテムを追加してみましょう。

95
00:03:59,850 --> 00:04:01,828
and see what happens.
見てください。

96
00:04:01,828 --> 00:04:04,359
見ての通り、商品のリストが
更新されただけではなく＿

97
00:04:04,359 --> 00:04:07,940
合計も同様に更新されています。

98
00:04:07,940 --> 00:04:10,410
次に、このページに
動的な要素を追加してみましょう

99
00:04:10,410 --> 00:04:12,346
button を使った。

100
00:04:12,346 --> 00:04:14,490
それぞれの商品に button 要素を
追加してみましょう

101
00:04:14,490 --> 00:04:15,850
そして、それがクリックされると＿

102
00:04:15,850 --> 00:04:18,850
在庫数が１増えるようにしましょう。

103
00:04:19,959 --> 00:04:22,279
ブラウザに戻って、

104
00:04:22,279 --> 00:04:25,159
すべての在庫数が
更新されただけでなく

105
00:04:25,159 --> 00:04:27,780
例えば、jacket が
追加されると

106
00:04:27,780 --> 00:04:30,300
out of stock というテキストが消えます。

107
00:04:30,300 --> 00:04:31,860
このボタンを百万回クリックするのは＿

108
00:04:31,860 --> 00:04:33,890
とても疲れてしまうでしょうが、
例えば、

109
00:04:33,890 --> 00:04:37,719
ジャケットやソックスの数量
入力すればいいでしょうか？

110
00:04:37,719 --> 00:04:40,580
新しく input フィールドを追加します

111
00:04:40,580 --> 00:04:43,867
商品の数量に紐付いた
product quantity field
with the v-model directive

112
00:04:43,867 --> 00:04:46,519
specifying that it is always a number.

113
00:04:46,519 --> 00:04:48,060
これで数量を入力できるようになりました。
You'll notice now, I can input the total

114
00:04:48,060 --> 00:04:52,450
それぞれ商品の数量は
すぐに更新されます。

115
00:04:52,450 --> 00:04:54,500
在庫数をゼロにすると

116
00:04:54,500 --> 00:04:57,899
out of stock というテキストも表示されます。

117
00:04:57,899 --> 00:05:01,232
先程追加したボタンもうまく動きます

118
00:05:02,259 --> 00:05:03,999
大きなアプリケーションを作る場合、
If we were building a larger application,

119
00:05:03,999 --> 00:05:05,839
ファイルを分割したいでしょう＿

120
00:05:05,839 --> 00:05:09,290
コンポーネントごとに

121
00:05:09,290 --> 00:05:11,827
Vue は CLI を持っていて＿

122
00:05:11,827 --> 00:05:15,828
簡単に本番ですぐに使える
プロジェクトを作成することができます。

123
00:05:15,828 --> 00:05:18,879
Vue コンポーネントを
ひとつのファイルで＿

124
00:05:18,879 --> 00:05:21,770
以下のものを含んだ。HTML と JavaScript_

125
00:05:21,770 --> 00:05:23,687
そして名前空間で閉じられた CSS もしくは SCSS

126
00:05:25,599 --> 00:05:28,926
ー Vue.js の作者の Evan You です。

127
00:05:28,926 --> 00:05:31,587
この動画ではとても表面的な
ものしか紹介していません＿

128
00:05:31,587 --> 00:05:33,065
Vue ができることの。

129
00:05:33,065 --> 00:05:34,856
エコシステムには、それ以外に多くのものがあります＿

130
00:05:34,856 --> 00:05:36,555
以下のことを助けます。ビルド、まとめる_

131
00:05:36,555 --> 00:05:39,076
そしてフロントエンドのアプリケーションをスケールさせるために。

132
00:05:39,076 --> 00:05:42,457
より深く理解するために、
ドキュメントを読んでみてください。

133
00:05:42,457 --> 00:05:44,708
楽しめる思います。
